<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>yyyq</artifactId>
		<groupId>yyyq</groupId>
		<version>1.0.0</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>
	<artifactId>yyyq-portal</artifactId>
	<packaging>jar</packaging>
	<version>1.0.0</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<maven.build.timestamp.format>yyMMddHHmm</maven.build.timestamp.format>
		<!--  配置镜像前缀（就是仓库服务地址） -->
		<docker.image.prefix>registry.cn-qingdao.aliyuncs.com/yiyouyiqu/yyyq</docker.image.prefix>
		<dockerfile.skip>true</dockerfile.skip>
		<dockerfile.tag>${maven.build.timestamp}</dockerfile.tag>
	</properties>

	<dependencies>
		<!-- springCloud 配置 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-feign</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>2.3.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.nekohtml</groupId>
			<artifactId>nekohtml</artifactId>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>org.springframework.cloud</groupId>-->
			<!--<artifactId>spring-cloud-starter-feign</artifactId>-->
		<!--</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-feign</artifactId>
		</dependency>
		<dependency>
			<groupId>yyyq</groupId>
			<artifactId>yyyq-common</artifactId>
			<version>1.0.0</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<!-- dockerfile plugin -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.4.3</version>
				<configuration>
					<!-- 生成的镜像仓库名称 -->
					<repository>${docker.image.prefix}/${project.artifactId}</repository>
					<!-- 生成的镜像版本 -->
					<tag>${project.version}</tag>
					<!-- 推送到私有镜像仓库时需要开启安全认证 -->
					<useMavenSettingsForAuth>true</useMavenSettingsForAuth>
					<skip>${dockerfile.skip}</skip>
				</configuration>
				<!-- 直接使用mvn install命令打包项目，就会自动构建镜像和推送镜像 -->
				<executions>
					<execution>
						<id>tag-latest</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
							<goal>tag</goal>
							<goal>push</goal>
						</goals>
						<configuration>
							<tag>latest</tag>
						</configuration>
					</execution>
					<execution>
						<id>tag-version</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
							<goal>tag</goal>
							<goal>push</goal>
						</goals>
						<configuration>
							<tag>${dockerfile.tag}</tag>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
